# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

feign:
  hystrix:
    enabled: true
  # client:
  #     config:
  #         default:
  #             connectTimeout: 5000
  #             readTimeout: 5000

# See https://github.com/Netflix/Hystrix/wiki/Configuration
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          # See https://github.com/spring-cloud/spring-cloud-netflix/issues/1330
          # thread:
          #     timeoutInMilliseconds: 10000
  shareSecurityContext: true

management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include: ['configprops', 'env', 'health', 'info', 'jhimetrics', 'logfile', 'loggers', 'prometheus', 'threaddump']
  endpoint:
    health:
      show-details: when_authorized
      roles: 'ROLE_ADMIN'
    jhimetrics:
      enabled: true
  info:
    git:
      mode: full
  health:
    mail:
      enabled: false # When using the MailService, configure an SMTP server and set this to true
  metrics:
    export:
      # Prometheus is the default metrics backend
      prometheus:
        enabled: true
        step: 60
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
    web:
      server:
        request:
          autotime:
            enabled: true

spring:
  autoconfigure:
    exclude: org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration
  application:
    name: camundaServer
  cloud:
    consul:
      discovery:
        healthCheckPath: /management/health
        instanceId: camundaserver:${spring.application.instance-id:${random.value}}
        service-name: camundaserver
      config:
        watch:
          enabled: false
    stream:
      default-binder: kafka
      function:
        definition: validationSupplier;validationEventConsumer;memberSupplier;memberEventConsumer;memberApprovalSupplier;memberApprovalEventConsumer;memberRejectionSupplier;memberRejectionEventConsumer
      bindings:
        validationSupplier-out-0:
          destination: validation
        validationEventConsumer-in-0:
          destination: validation
        memberSupplier-out-0:
          destination: member
        memberEventConsumer-in-0:
          destination: member
        memberApprovalSupplier-out-0:
          destination: memberApprovd
        memberApprovalEventConsumer-in-0:
          destination: memberApprovd
        memberRejectionSupplier-out-0:
          destination: memberRejectd
        memberRejectionEventConsumer-in-0:
          destination: memberRejectd

      kafka:
        binder:
          brokers:
            - localhost:9092
  jmx:
    enabled: false
  data:
    jpa:
      repositories:
        bootstrap-mode: deferred
  jpa:
    open-in-view: false
    properties:
      hibernate.jdbc.time_zone: UTC
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      # modify batch size as necessary
      hibernate.jdbc.batch_size: 25
      hibernate.order_inserts: true
      hibernate.order_updates: true
      hibernate.query.fail_on_pagination_over_collection_fetch: true
      hibernate.query.in_clause_parameter_padding: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  task:
    execution:
      thread-name-prefix: camunda-server-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: camunda-server-scheduling-
      pool:
        size: 2
  thymeleaf:
    mode: HTML
  output:
    ansi:
      console-available: true

  context-path: src/main/resources/static/forms/start-form.html
info:
  # Comma separated list of profiles that will trigger the ribbon to show
  display-ribbon-on-profiles: 'dev'
# Spring Boot Security OAuth2 SSO
spring.security:
  oauth2:
    client:
      registration:
        keycloak:
          provider: keycloak
          client-id: camunda-identity-service
          client-secret: 1af9c09e-d82c-4dae-b428-9a191e8249e2
          authorization-grant-type: authorization_code
          redirect-uri: 'http://localhost:8087/camunda/app/welcome/default/login/oauth2/code/keycloak'
          scope: openid, profile, email
      provider:
        keycloak:
          issuer-uri: http://192.168.5.86/auth/realms/myRealm
          authorization-uri: http://192.168.5.86/auth/realms/myRealm/protocol/openid-connect/auth
          user-info-uri: http://192.168.5.86/auth/realms/myRealm/protocol/openid-connect/userinfo
          token-uri: http://192.168.5.86/auth/realms/myRealm/protocol/openid-connect/token
          jwk-set-uri: http://192.168.5.86/auth/realms/myRealm/protocol/openid-connect/certs
          # set user-name-attribute one of: authorization_code client_credentials
          # - sub                -> default; using keycloak ID as camunda user ID
          # - email              -> useEmailAsCamundaUserId=true
          # - preferred_username -> useUsernameAsCamundaUserId=true
          user-name-attribute: preferred_username

# Camunda Keycloak Identity Provider Plugin
plugin.identity.keycloak:
  keycloakIssuerUrl: http://192.168.5.86/auth/realms/myRealm
  keycloakAdminUrl: http://192.168.5.86/auth/admin/realms/myRealm
  clientId: login-app
  clientSecret: 3d62e825-e293-4824-a789-d8180bfc86f6
  useUsernameAsCamundaUserId: true
  useGroupPathAsCamundaGroupId: true
  administratorGroupName: camunda-admin
server:
  servlet:
    session:
      cookie:
        http-only: true
# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  clientApp:
    name: 'camundaServerApp'
  # By default CORS is disabled. Uncomment to enable.
  # cors:
  #     allowed-origins: "*"
  #     allowed-methods: "*"
  #     allowed-headers: "*"
  #     exposed-headers: "Authorization,Link,X-Total-Count"
  #     allow-credentials: true
  #     max-age: 1800
  mail:
    from: camundaServer@localhost
  swagger:
    default-include-pattern: /api/.*
    title: camundaServer API
    description: camundaServer API documentation
    version: 0.0.1
    terms-of-service-url:
    contact-name:
    contact-url:
    contact-email:
    license: unlicensed
    license-url:
  security:
    oauth2:
      audience:
        - account
        - api://default
kafka:
  bootstrap-servers: localhost:9092
  consumer:
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    group.id: camunda-server
    auto.offset.reset: earliest
  producer:
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.serializer: org.apache.kafka.common.serialization.StringSerializer

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:

bpm:
  token: this is a apecial token
